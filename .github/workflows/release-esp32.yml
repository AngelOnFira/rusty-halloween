name: Release ESP32 Firmware

on:
  push:
    tags:
      - 'esp32-v*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust for Xtensa
      uses: esp-rs/xtensa-toolchain@v1.5
      with:
        default: true
        buildtargets: esp32s2
        ldproxy: true

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache Cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-

    - name: Cache Cargo build
      uses: actions/cache@v4
      with:
        path: esp32-firmware/target
        key: ${{ runner.os }}-cargo-target-esp32s2-${{ hashFiles('esp32-firmware/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-esp32s2-

    # - name: Install ESP-IDF dependencies
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y git wget flex bison gperf python3 \
    #       python3-pip python3-venv cmake ninja-build ccache libffi-dev \
    #       libssl-dev dfu-util libusb-1.0-0

    # - name: Install ESP-IDF
    #   run: |
    #     mkdir -p ~/esp
    #     cd ~/esp
    #     git clone -b v5.3.2 --recursive https://github.com/espressif/esp-idf.git
    #     cd esp-idf
    #     ./install.sh esp32s2

    - name: Create .env file
      working-directory: ./esp32-firmware
      run: |
        echo "ROUTER_SSID=\"${{ secrets.ROUTER_SSID }}\"" > .env
        echo "ROUTER_PASSWORD=\"${{ secrets.ROUTER_PASSWORD }}\"" >> .env

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build firmware
      working-directory: ./esp32-firmware
      run: |
        # . ~/esp/esp-idf/export.sh
        cargo build --release

    - name: Cache espflash
      id: cache-espflash
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/espflash
        key: ${{ runner.os }}-espflash-v3
        restore-keys: |
          ${{ runner.os }}-espflash-

    - name: Install cargo-binstall
      if: steps.cache-espflash.outputs.cache-hit != 'true'
      uses: cargo-bins/cargo-binstall@main

    - name: Install espflash
      if: steps.cache-espflash.outputs.cache-hit != 'true'
      run: cargo binstall espflash -y

    - name: Create full flash image (for initial programming via USB)
      working-directory: ./esp32-firmware
      run: |
        espflash save-image \
          --chip esp32s2 \
          --merge \
          --skip-padding \
          target/xtensa-esp32s2-espidf/release/esp32-mesh-firmware \
          esp32-mesh-firmware-${{ steps.version.outputs.VERSION }}-full.bin

    - name: Create app-only binary (for OTA updates over WiFi)
      working-directory: ./esp32-firmware
      run: |
        espflash save-image \
          --chip esp32s2 \
          --merge \
          --target-app-partition ota_0 \
          --skip-padding \
          target/xtensa-esp32s2-espidf/release/esp32-mesh-firmware \
          esp32-mesh-firmware-${{ steps.version.outputs.VERSION }}.bin

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          esp32-firmware/esp32-mesh-firmware-${{ steps.version.outputs.VERSION }}.bin
          esp32-firmware/esp32-mesh-firmware-${{ steps.version.outputs.VERSION }}-full.bin
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## ESP32 Firmware Release

          **For OTA Updates (over WiFi):**
          - Use: `esp32-mesh-firmware-${{ steps.version.outputs.VERSION }}.bin`
          - This is the app-only binary for OTA updates

          **For Initial Flash (via USB):**
          - Use: `esp32-mesh-firmware-${{ steps.version.outputs.VERSION }}-full.bin`
          - This includes bootloader, partition table, and app
          - Command: `espflash flash --monitor esp32-mesh-firmware-${{ steps.version.outputs.VERSION }}-full.bin`
