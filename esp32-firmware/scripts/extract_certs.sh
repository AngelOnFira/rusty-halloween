#!/bin/bash
# Certificate Extraction Script for ESP32 OTA
# Extracts root CA certificates from GitHub and Cloudflare servers
# Usage: ./scripts/extract_certs.sh

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
CERTS_DIR="$PROJECT_DIR/certs"

echo "=== ESP32 Certificate Extraction Tool ==="
echo "Project: $PROJECT_DIR"
echo "Certificates will be saved to: $CERTS_DIR"
echo ""

# Create certs directory if it doesn't exist
mkdir -p "$CERTS_DIR"

# Temporary directory for extraction
TMP_DIR=$(mktemp -d)
trap "rm -rf $TMP_DIR" EXIT

echo "[1/4] Extracting GitHub certificate chain..."
openssl s_client -showcerts -servername api.github.com -connect api.github.com:443 </dev/null 2>/dev/null | \
  sed -n '/BEGIN CERTIFICATE/,/END CERTIFICATE/p' > "$TMP_DIR/github_chain.pem"

if [ ! -s "$TMP_DIR/github_chain.pem" ]; then
    echo "ERROR: Failed to extract GitHub certificates"
    exit 1
fi

echo "[2/4] Extracting Cloudflare certificate chain..."
openssl s_client -showcerts -servername one.one.one.one -connect one.one.one.one:443 </dev/null 2>/dev/null | \
  sed -n '/BEGIN CERTIFICATE/,/END CERTIFICATE/p' > "$TMP_DIR/cloudflare_chain.pem"

if [ ! -s "$TMP_DIR/cloudflare_chain.pem" ]; then
    echo "WARNING: Failed to extract Cloudflare certificates (continuing)"
fi

echo "[3/4] Extracting root CA certificates..."

# Split certificate chains into individual files
cd "$TMP_DIR"

# GitHub chain
if [ -f github_chain.pem ]; then
    csplit -s -z -f github_ github_chain.pem '/-----BEGIN CERTIFICATE-----/' '{*}' 2>/dev/null || true
    # Keep only the last cert (root CA)
    GITHUB_ROOT=$(ls github_* 2>/dev/null | sort -V | tail -1)
    if [ -n "$GITHUB_ROOT" ]; then
        cp "$GITHUB_ROOT" github_root.pem
    fi
fi

# Cloudflare chain
if [ -f cloudflare_chain.pem ]; then
    csplit -s -z -f cloudflare_ cloudflare_chain.pem '/-----BEGIN CERTIFICATE-----/' '{*}' 2>/dev/null || true
    # Keep only the last cert (root CA)
    CLOUDFLARE_ROOT=$(ls cloudflare_* 2>/dev/null | grep -v chain | sort -V | tail -1)
    if [ -n "$CLOUDFLARE_ROOT" ]; then
        cp "$CLOUDFLARE_ROOT" cloudflare_root.pem
    fi
fi

echo "[4/4] Creating certificate bundle..."

# Create bundle with root CAs
cat > "$CERTS_DIR/bundle.pem" << 'EOF'
# Custom Certificate Bundle for ESP32 OTA
# Auto-generated by extract_certs.sh
# Contains root CA certificates for:
# - GitHub (api.github.com)
# - Cloudflare (Zero Trust/Access domains)

EOF

# Add GitHub root CA
if [ -f github_root.pem ]; then
    echo "# GitHub Root CA (DigiCert)" >> "$CERTS_DIR/bundle.pem"
    cat github_root.pem >> "$CERTS_DIR/bundle.pem"
    echo "" >> "$CERTS_DIR/bundle.pem"
    echo "✓ Added GitHub root CA"
else
    echo "⚠ GitHub root CA not found"
fi

# Add Cloudflare root CA
if [ -f cloudflare_root.pem ]; then
    echo "# Cloudflare Root CA" >> "$CERTS_DIR/bundle.pem"
    cat cloudflare_root.pem >> "$CERTS_DIR/bundle.pem"
    echo "" >> "$CERTS_DIR/bundle.pem"
    echo "✓ Added Cloudflare root CA"
else
    echo "⚠ Cloudflare root CA not found"
fi

# Display certificate info
echo ""
echo "=== Certificate Bundle Summary ==="
echo "Bundle location: $CERTS_DIR/bundle.pem"
echo "Bundle size: $(wc -c < "$CERTS_DIR/bundle.pem") bytes"
echo ""
echo "Certificates included:"
openssl storeutl -certs "$CERTS_DIR/bundle.pem" 2>/dev/null | grep "Subject:" || echo "(Could not parse certificates)"

echo ""
echo "✓ Certificate extraction complete!"
echo ""
echo "Next steps:"
echo "1. Review $CERTS_DIR/bundle.pem"
echo "2. Rebuild firmware: cargo build --release"
echo "3. Flash to device: espflash flash --monitor target/xtensa-esp32s2-espidf/release/esp32-mesh-firmware"
