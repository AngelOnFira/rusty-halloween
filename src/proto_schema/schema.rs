// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `schema.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Header)
pub struct Header {
    // message fields
    // @@protoc_insertion_point(field:Header.projectorId)
    pub projectorId: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Header.pointCount)
    pub pointCount: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Header.home)
    pub home: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Header.enable)
    pub enable: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Header.checksum)
    pub checksum: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:Header.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // optional int32 projectorId = 1;

    pub fn projectorId(&self) -> i32 {
        self.projectorId.unwrap_or(0)
    }

    pub fn clear_projectorId(&mut self) {
        self.projectorId = ::std::option::Option::None;
    }

    pub fn has_projectorId(&self) -> bool {
        self.projectorId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_projectorId(&mut self, v: i32) {
        self.projectorId = ::std::option::Option::Some(v);
    }

    // optional int32 pointCount = 2;

    pub fn pointCount(&self) -> i32 {
        self.pointCount.unwrap_or(0)
    }

    pub fn clear_pointCount(&mut self) {
        self.pointCount = ::std::option::Option::None;
    }

    pub fn has_pointCount(&self) -> bool {
        self.pointCount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pointCount(&mut self, v: i32) {
        self.pointCount = ::std::option::Option::Some(v);
    }

    // optional int32 home = 3;

    pub fn home(&self) -> i32 {
        self.home.unwrap_or(0)
    }

    pub fn clear_home(&mut self) {
        self.home = ::std::option::Option::None;
    }

    pub fn has_home(&self) -> bool {
        self.home.is_some()
    }

    // Param is passed by value, moved
    pub fn set_home(&mut self, v: i32) {
        self.home = ::std::option::Option::Some(v);
    }

    // optional int32 enable = 4;

    pub fn enable(&self) -> i32 {
        self.enable.unwrap_or(0)
    }

    pub fn clear_enable(&mut self) {
        self.enable = ::std::option::Option::None;
    }

    pub fn has_enable(&self) -> bool {
        self.enable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enable(&mut self, v: i32) {
        self.enable = ::std::option::Option::Some(v);
    }

    // optional bool checksum = 5;

    pub fn checksum(&self) -> bool {
        self.checksum.unwrap_or(false)
    }

    pub fn clear_checksum(&mut self) {
        self.checksum = ::std::option::Option::None;
    }

    pub fn has_checksum(&self) -> bool {
        self.checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_checksum(&mut self, v: bool) {
        self.checksum = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "projectorId",
            |m: &Header| { &m.projectorId },
            |m: &mut Header| { &mut m.projectorId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pointCount",
            |m: &Header| { &m.pointCount },
            |m: &mut Header| { &mut m.pointCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "home",
            |m: &Header| { &m.home },
            |m: &mut Header| { &mut m.home },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "enable",
            |m: &Header| { &m.enable },
            |m: &mut Header| { &mut m.enable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "checksum",
            |m: &Header| { &m.checksum },
            |m: &mut Header| { &mut m.checksum },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Header>(
            "Header",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Header {
    const NAME: &'static str = "Header";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.projectorId = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.pointCount = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.home = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.enable = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.checksum = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.projectorId {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.pointCount {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.home {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.enable {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.checksum {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.projectorId {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.pointCount {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.home {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.enable {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.checksum {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Header {
        Header::new()
    }

    fn clear(&mut self) {
        self.projectorId = ::std::option::Option::None;
        self.pointCount = ::std::option::Option::None;
        self.home = ::std::option::Option::None;
        self.enable = ::std::option::Option::None;
        self.checksum = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Header {
        static instance: Header = Header {
            projectorId: ::std::option::Option::None,
            pointCount: ::std::option::Option::None,
            home: ::std::option::Option::None,
            enable: ::std::option::Option::None,
            checksum: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Header {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Header").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Pixel)
pub struct Pixel {
    // message fields
    // @@protoc_insertion_point(field:Pixel.xCoOrd)
    pub xCoOrd: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Pixel.yCoOrd)
    pub yCoOrd: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Pixel.red)
    pub red: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Pixel.green)
    pub green: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Pixel.blue)
    pub blue: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Pixel.checksum)
    pub checksum: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:Pixel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Pixel {
    fn default() -> &'a Pixel {
        <Pixel as ::protobuf::Message>::default_instance()
    }
}

impl Pixel {
    pub fn new() -> Pixel {
        ::std::default::Default::default()
    }

    // optional int32 xCoOrd = 1;

    pub fn xCoOrd(&self) -> i32 {
        self.xCoOrd.unwrap_or(0)
    }

    pub fn clear_xCoOrd(&mut self) {
        self.xCoOrd = ::std::option::Option::None;
    }

    pub fn has_xCoOrd(&self) -> bool {
        self.xCoOrd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_xCoOrd(&mut self, v: i32) {
        self.xCoOrd = ::std::option::Option::Some(v);
    }

    // optional int32 yCoOrd = 2;

    pub fn yCoOrd(&self) -> i32 {
        self.yCoOrd.unwrap_or(0)
    }

    pub fn clear_yCoOrd(&mut self) {
        self.yCoOrd = ::std::option::Option::None;
    }

    pub fn has_yCoOrd(&self) -> bool {
        self.yCoOrd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yCoOrd(&mut self, v: i32) {
        self.yCoOrd = ::std::option::Option::Some(v);
    }

    // optional int32 red = 3;

    pub fn red(&self) -> i32 {
        self.red.unwrap_or(0)
    }

    pub fn clear_red(&mut self) {
        self.red = ::std::option::Option::None;
    }

    pub fn has_red(&self) -> bool {
        self.red.is_some()
    }

    // Param is passed by value, moved
    pub fn set_red(&mut self, v: i32) {
        self.red = ::std::option::Option::Some(v);
    }

    // optional int32 green = 4;

    pub fn green(&self) -> i32 {
        self.green.unwrap_or(0)
    }

    pub fn clear_green(&mut self) {
        self.green = ::std::option::Option::None;
    }

    pub fn has_green(&self) -> bool {
        self.green.is_some()
    }

    // Param is passed by value, moved
    pub fn set_green(&mut self, v: i32) {
        self.green = ::std::option::Option::Some(v);
    }

    // optional int32 blue = 5;

    pub fn blue(&self) -> i32 {
        self.blue.unwrap_or(0)
    }

    pub fn clear_blue(&mut self) {
        self.blue = ::std::option::Option::None;
    }

    pub fn has_blue(&self) -> bool {
        self.blue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blue(&mut self, v: i32) {
        self.blue = ::std::option::Option::Some(v);
    }

    // optional bool checksum = 6;

    pub fn checksum(&self) -> bool {
        self.checksum.unwrap_or(false)
    }

    pub fn clear_checksum(&mut self) {
        self.checksum = ::std::option::Option::None;
    }

    pub fn has_checksum(&self) -> bool {
        self.checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_checksum(&mut self, v: bool) {
        self.checksum = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "xCoOrd",
            |m: &Pixel| { &m.xCoOrd },
            |m: &mut Pixel| { &mut m.xCoOrd },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "yCoOrd",
            |m: &Pixel| { &m.yCoOrd },
            |m: &mut Pixel| { &mut m.yCoOrd },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "red",
            |m: &Pixel| { &m.red },
            |m: &mut Pixel| { &mut m.red },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "green",
            |m: &Pixel| { &m.green },
            |m: &mut Pixel| { &mut m.green },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "blue",
            |m: &Pixel| { &m.blue },
            |m: &mut Pixel| { &mut m.blue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "checksum",
            |m: &Pixel| { &m.checksum },
            |m: &mut Pixel| { &mut m.checksum },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Pixel>(
            "Pixel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Pixel {
    const NAME: &'static str = "Pixel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.xCoOrd = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.yCoOrd = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.red = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.green = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.blue = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.checksum = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.xCoOrd {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.yCoOrd {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.red {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.green {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.blue {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.checksum {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.xCoOrd {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.yCoOrd {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.red {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.green {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.blue {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.checksum {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Pixel {
        Pixel::new()
    }

    fn clear(&mut self) {
        self.xCoOrd = ::std::option::Option::None;
        self.yCoOrd = ::std::option::Option::None;
        self.red = ::std::option::Option::None;
        self.green = ::std::option::Option::None;
        self.blue = ::std::option::Option::None;
        self.checksum = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Pixel {
        static instance: Pixel = Pixel {
            xCoOrd: ::std::option::Option::None,
            yCoOrd: ::std::option::Option::None,
            red: ::std::option::Option::None,
            green: ::std::option::Option::None,
            blue: ::std::option::Option::None,
            checksum: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Pixel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Pixel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Pixel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pixel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:DrawInstructions)
pub struct DrawInstructions {
    // message fields
    // @@protoc_insertion_point(field:DrawInstructions.head)
    pub head: ::protobuf::MessageField<Header>,
    // @@protoc_insertion_point(field:DrawInstructions.pixel)
    pub pixel: ::std::vec::Vec<Pixel>,
    // special fields
    // @@protoc_insertion_point(special_field:DrawInstructions.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DrawInstructions {
    fn default() -> &'a DrawInstructions {
        <DrawInstructions as ::protobuf::Message>::default_instance()
    }
}

impl DrawInstructions {
    pub fn new() -> DrawInstructions {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Header>(
            "head",
            |m: &DrawInstructions| { &m.head },
            |m: &mut DrawInstructions| { &mut m.head },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pixel",
            |m: &DrawInstructions| { &m.pixel },
            |m: &mut DrawInstructions| { &mut m.pixel },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DrawInstructions>(
            "DrawInstructions",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DrawInstructions {
    const NAME: &'static str = "DrawInstructions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.head)?;
                },
                18 => {
                    self.pixel.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.pixel {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.head.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.pixel {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DrawInstructions {
        DrawInstructions::new()
    }

    fn clear(&mut self) {
        self.head.clear();
        self.pixel.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DrawInstructions {
        static instance: DrawInstructions = DrawInstructions {
            head: ::protobuf::MessageField::none(),
            pixel: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DrawInstructions {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DrawInstructions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DrawInstructions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DrawInstructions {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:picoMessage)
pub struct PicoMessage {
    // message fields
    // @@protoc_insertion_point(field:picoMessage.InterfaceVersion)
    pub InterfaceVersion: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:picoMessage.instructions)
    pub instructions: ::protobuf::MessageField<DrawInstructions>,
    // special fields
    // @@protoc_insertion_point(special_field:picoMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PicoMessage {
    fn default() -> &'a PicoMessage {
        <PicoMessage as ::protobuf::Message>::default_instance()
    }
}

impl PicoMessage {
    pub fn new() -> PicoMessage {
        ::std::default::Default::default()
    }

    // optional int32 InterfaceVersion = 1;

    pub fn InterfaceVersion(&self) -> i32 {
        self.InterfaceVersion.unwrap_or(1i32)
    }

    pub fn clear_InterfaceVersion(&mut self) {
        self.InterfaceVersion = ::std::option::Option::None;
    }

    pub fn has_InterfaceVersion(&self) -> bool {
        self.InterfaceVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_InterfaceVersion(&mut self, v: i32) {
        self.InterfaceVersion = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "InterfaceVersion",
            |m: &PicoMessage| { &m.InterfaceVersion },
            |m: &mut PicoMessage| { &mut m.InterfaceVersion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, DrawInstructions>(
            "instructions",
            |m: &PicoMessage| { &m.instructions },
            |m: &mut PicoMessage| { &mut m.instructions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PicoMessage>(
            "picoMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PicoMessage {
    const NAME: &'static str = "picoMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.InterfaceVersion = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.instructions)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.InterfaceVersion {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.instructions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.InterfaceVersion {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.instructions.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PicoMessage {
        PicoMessage::new()
    }

    fn clear(&mut self) {
        self.InterfaceVersion = ::std::option::Option::None;
        self.instructions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PicoMessage {
        static instance: PicoMessage = PicoMessage {
            InterfaceVersion: ::std::option::Option::None,
            instructions: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PicoMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("picoMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PicoMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PicoMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cschema.proto\"\x92\x01\n\x06Header\x12\x20\n\x0bprojectorId\x18\
    \x01\x20\x01(\x05R\x0bprojectorId\x12\x1e\n\npointCount\x18\x02\x20\x01(\
    \x05R\npointCount\x12\x12\n\x04home\x18\x03\x20\x01(\x05R\x04home\x12\
    \x16\n\x06enable\x18\x04\x20\x01(\x05R\x06enable\x12\x1a\n\x08checksum\
    \x18\x05\x20\x01(\x08R\x08checksum\"\x8f\x01\n\x05Pixel\x12\x16\n\x06xCo\
    Ord\x18\x01\x20\x01(\x05R\x06xCoOrd\x12\x16\n\x06yCoOrd\x18\x02\x20\x01(\
    \x05R\x06yCoOrd\x12\x10\n\x03red\x18\x03\x20\x01(\x05R\x03red\x12\x14\n\
    \x05green\x18\x04\x20\x01(\x05R\x05green\x12\x12\n\x04blue\x18\x05\x20\
    \x01(\x05R\x04blue\x12\x1a\n\x08checksum\x18\x06\x20\x01(\x08R\x08checks\
    um\"M\n\x10DrawInstructions\x12\x1b\n\x04head\x18\x01\x20\x01(\x0b2\x07.\
    HeaderR\x04head\x12\x1c\n\x05pixel\x18\x02\x20\x03(\x0b2\x06.PixelR\x05p\
    ixel\"s\n\x0bpicoMessage\x12-\n\x10InterfaceVersion\x18\x01\x20\x01(\x05\
    :\x011R\x10InterfaceVersion\x125\n\x0cinstructions\x18\x02\x20\x01(\x0b2\
    \x11.DrawInstructionsR\x0cinstructionsJ\xe6\n\n\x06\x12\x04\0\0\x1b\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x08\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x02\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x03\x02!\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x03\x02\n\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x03\x0b\x10\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x03\
    \x11\x1c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x03\x1f\x20\n\x0b\n\x04\x04\
    \0\x02\x01\x12\x03\x04\x02\x20\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x04\
    \x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x04\x0b\x10\n\x0c\n\x05\x04\
    \0\x02\x01\x01\x12\x03\x04\x11\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x04\x1e\x1f\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x05\x02\x1a\n\x0c\n\x05\
    \x04\0\x02\x02\x04\x12\x03\x05\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x05\x0b\x10\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x05\x11\x15\n\x0c\
    \n\x05\x04\0\x02\x02\x03\x12\x03\x05\x18\x19\n\x0b\n\x04\x04\0\x02\x03\
    \x12\x03\x06\x02\x1c\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x06\x02\n\n\
    \x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x06\x0b\x10\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x06\x11\x17\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x06\
    \x1a\x1b\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x07\x02\x1e\n\x0c\n\x05\x04\0\
    \x02\x04\x04\x12\x03\x07\x02\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x07\
    \x0b\x0f\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x07\x11\x19\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03\x07\x1c\x1d\n\x14\n\x02\x04\x01\x12\x04\n\0\
    \x11\x01\"\x08\x20point?\n\n\n\n\x03\x04\x01\x01\x12\x03\n\x08\r\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x0b\x02\x1c\n\x0c\n\x05\x04\x01\x02\0\x04\x12\
    \x03\x0b\x02\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0b\x0b\x10\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x0b\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x0b\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0c\x02\x1c\n\
    \x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x0c\x02\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\x0c\x0b\x10\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0c\
    \x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0c\x1a\x1b\n\x0b\n\x04\
    \x04\x01\x02\x02\x12\x03\r\x02\x19\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\
    \x03\r\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\r\x0b\x10\n\x0c\n\
    \x05\x04\x01\x02\x02\x01\x12\x03\r\x11\x14\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03\r\x17\x18\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x0e\x02\x1b\n\
    \x0c\n\x05\x04\x01\x02\x03\x04\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\x01\x02\
    \x03\x05\x12\x03\x0e\x0b\x10\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x0e\
    \x11\x16\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x0e\x19\x1a\n\x0b\n\x04\
    \x04\x01\x02\x04\x12\x03\x0f\x02\x1a\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\
    \x03\x0f\x02\n\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x0f\x0b\x10\n\x0c\
    \n\x05\x04\x01\x02\x04\x01\x12\x03\x0f\x11\x15\n\x0c\n\x05\x04\x01\x02\
    \x04\x03\x12\x03\x0f\x18\x19\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x10\x02\
    \x1e\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\x03\x10\x02\n\n\x0c\n\x05\x04\
    \x01\x02\x05\x05\x12\x03\x10\x0b\x0f\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\
    \x03\x10\x11\x19\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x10\x1c\x1d\n\n\
    \n\x02\x04\x02\x12\x04\x13\0\x16\x01\n\n\n\x03\x04\x02\x01\x12\x03\x13\
    \x08\x18\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x14\x02\x1c\n\x0c\n\x05\x04\
    \x02\x02\0\x04\x12\x03\x14\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\
    \x14\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x14\x12\x16\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03\x14\x1a\x1b\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03\x15\x02\x1c\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x15\x02\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x15\x0b\x10\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03\x15\x12\x17\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\
    \x15\x1a\x1b\n2\n\x02\x04\x03\x12\x04\x18\0\x1b\x01\"&\x20this\x20is\x20\
    what\x20you\x20actually\x20listen\x20for\n\n\n\n\x03\x04\x03\x01\x12\x03\
    \x18\x08\x13\n\xa5\x01\n\x04\x04\x03\x02\0\x12\x03\x19\x02<\"\x97\x01\
    \x20backwards\x20compat\x20and\x20API\x20deprication\x20support.\x20Ther\
    e's\x20no\x20reason\x20to\x20set\x20this\x20field\x20as\x20the\x20defaul\
    t\x20will\x20be\x20compiled\x20in\x20(which\x20is\x20exactly\x20what\x20\
    you\x20want)\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x19\x02\n\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03\x19\x0b\x10\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\x19\x1b+\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x19./\n\x0c\n\
    \x05\x04\x03\x02\0\x08\x12\x03\x190;\n\x0c\n\x05\x04\x03\x02\0\x07\x12\
    \x03\x199:\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1a\x02-\n\x0c\n\x05\x04\
    \x03\x02\x01\x04\x12\x03\x1a\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\
    \x03\x1a\x0b\x1b\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1a\x1c(\n\x0c\
    \n\x05\x04\x03\x02\x01\x03\x12\x03\x1a+,\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Header::generated_message_descriptor_data());
            messages.push(Pixel::generated_message_descriptor_data());
            messages.push(DrawInstructions::generated_message_descriptor_data());
            messages.push(PicoMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
