// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `schema.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:picoMessage)
pub struct PicoMessage {
    // message oneof groups
    pub payload: ::std::option::Option<pico_message::Payload>,
    // special fields
    // @@protoc_insertion_point(special_field:picoMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PicoMessage {
    fn default() -> &'a PicoMessage {
        <PicoMessage as ::protobuf::Message>::default_instance()
    }
}

impl PicoMessage {
    pub fn new() -> PicoMessage {
        ::std::default::Default::default()
    }

    // .Projector projector = 1;

    pub fn projector(&self) -> &Projector {
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Projector(ref v)) => v,
            _ => <Projector as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_projector(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_projector(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Projector(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_projector(&mut self, v: Projector) {
        self.payload = ::std::option::Option::Some(pico_message::Payload::Projector(v))
    }

    // Mutable pointer to the field.
    pub fn mut_projector(&mut self) -> &mut Projector {
        if let ::std::option::Option::Some(pico_message::Payload::Projector(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(pico_message::Payload::Projector(Projector::new()));
        }
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Projector(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_projector(&mut self) -> Projector {
        if self.has_projector() {
            match self.payload.take() {
                ::std::option::Option::Some(pico_message::Payload::Projector(v)) => v,
                _ => panic!(),
            }
        } else {
            Projector::new()
        }
    }

    // .Light light = 2;

    pub fn light(&self) -> &Light {
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Light(ref v)) => v,
            _ => <Light as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_light(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_light(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Light(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_light(&mut self, v: Light) {
        self.payload = ::std::option::Option::Some(pico_message::Payload::Light(v))
    }

    // Mutable pointer to the field.
    pub fn mut_light(&mut self) -> &mut Light {
        if let ::std::option::Option::Some(pico_message::Payload::Light(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(pico_message::Payload::Light(Light::new()));
        }
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Light(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_light(&mut self) -> Light {
        if self.has_light() {
            match self.payload.take() {
                ::std::option::Option::Some(pico_message::Payload::Light(v)) => v,
                _ => panic!(),
            }
        } else {
            Light::new()
        }
    }

    // .Audio audio = 3;

    pub fn audio(&self) -> &Audio {
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Audio(ref v)) => v,
            _ => <Audio as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_audio(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_audio(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Audio(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_audio(&mut self, v: Audio) {
        self.payload = ::std::option::Option::Some(pico_message::Payload::Audio(v))
    }

    // Mutable pointer to the field.
    pub fn mut_audio(&mut self) -> &mut Audio {
        if let ::std::option::Option::Some(pico_message::Payload::Audio(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(pico_message::Payload::Audio(Audio::new()));
        }
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Audio(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_audio(&mut self) -> Audio {
        if self.has_audio() {
            match self.payload.take() {
                ::std::option::Option::Some(pico_message::Payload::Audio(v)) => v,
                _ => panic!(),
            }
        } else {
            Audio::new()
        }
    }

    // .Vision vision = 4;

    pub fn vision(&self) -> &Vision {
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Vision(ref v)) => v,
            _ => <Vision as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_vision(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_vision(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Vision(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_vision(&mut self, v: Vision) {
        self.payload = ::std::option::Option::Some(pico_message::Payload::Vision(v))
    }

    // Mutable pointer to the field.
    pub fn mut_vision(&mut self) -> &mut Vision {
        if let ::std::option::Option::Some(pico_message::Payload::Vision(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(pico_message::Payload::Vision(Vision::new()));
        }
        match self.payload {
            ::std::option::Option::Some(pico_message::Payload::Vision(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_vision(&mut self) -> Vision {
        if self.has_vision() {
            match self.payload.take() {
                ::std::option::Option::Some(pico_message::Payload::Vision(v)) => v,
                _ => panic!(),
            }
        } else {
            Vision::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Projector>(
            "projector",
            PicoMessage::has_projector,
            PicoMessage::projector,
            PicoMessage::mut_projector,
            PicoMessage::set_projector,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Light>(
            "light",
            PicoMessage::has_light,
            PicoMessage::light,
            PicoMessage::mut_light,
            PicoMessage::set_light,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Audio>(
            "audio",
            PicoMessage::has_audio,
            PicoMessage::audio,
            PicoMessage::mut_audio,
            PicoMessage::set_audio,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Vision>(
            "vision",
            PicoMessage::has_vision,
            PicoMessage::vision,
            PicoMessage::mut_vision,
            PicoMessage::set_vision,
        ));
        oneofs.push(pico_message::Payload::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PicoMessage>(
            "picoMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PicoMessage {
    const NAME: &'static str = "picoMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.payload = ::std::option::Option::Some(pico_message::Payload::Projector(is.read_message()?));
                },
                18 => {
                    self.payload = ::std::option::Option::Some(pico_message::Payload::Light(is.read_message()?));
                },
                26 => {
                    self.payload = ::std::option::Option::Some(pico_message::Payload::Audio(is.read_message()?));
                },
                34 => {
                    self.payload = ::std::option::Option::Some(pico_message::Payload::Vision(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &pico_message::Payload::Projector(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pico_message::Payload::Light(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pico_message::Payload::Audio(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pico_message::Payload::Vision(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &pico_message::Payload::Projector(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &pico_message::Payload::Light(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &pico_message::Payload::Audio(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &pico_message::Payload::Vision(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PicoMessage {
        PicoMessage::new()
    }

    fn clear(&mut self) {
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PicoMessage {
        static instance: PicoMessage = PicoMessage {
            payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PicoMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("picoMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PicoMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PicoMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `picoMessage`
pub mod pico_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:picoMessage.payload)
    pub enum Payload {
        // @@protoc_insertion_point(oneof_field:picoMessage.projector)
        Projector(super::Projector),
        // @@protoc_insertion_point(oneof_field:picoMessage.light)
        Light(super::Light),
        // @@protoc_insertion_point(oneof_field:picoMessage.audio)
        Audio(super::Audio),
        // @@protoc_insertion_point(oneof_field:picoMessage.vision)
        Vision(super::Vision),
    }

    impl ::protobuf::Oneof for Payload {
    }

    impl ::protobuf::OneofFull for Payload {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PicoMessage as ::protobuf::MessageFull>::descriptor().oneof_by_name("payload").unwrap()).clone()
        }
    }

    impl Payload {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Payload>("payload")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Projector)
pub struct Projector {
    // message fields
    // @@protoc_insertion_point(field:Projector.header)
    pub header: ::protobuf::MessageField<Header>,
    // @@protoc_insertion_point(field:Projector.draw_instructions)
    pub draw_instructions: ::std::vec::Vec<DrawInstruction>,
    // special fields
    // @@protoc_insertion_point(special_field:Projector.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Projector {
    fn default() -> &'a Projector {
        <Projector as ::protobuf::Message>::default_instance()
    }
}

impl Projector {
    pub fn new() -> Projector {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Header>(
            "header",
            |m: &Projector| { &m.header },
            |m: &mut Projector| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "draw_instructions",
            |m: &Projector| { &m.draw_instructions },
            |m: &mut Projector| { &mut m.draw_instructions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Projector>(
            "Projector",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Projector {
    const NAME: &'static str = "Projector";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.draw_instructions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.draw_instructions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.draw_instructions {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Projector {
        Projector::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.draw_instructions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Projector {
        static instance: Projector = Projector {
            header: ::protobuf::MessageField::none(),
            draw_instructions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Projector {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Projector").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Projector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Projector {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Header)
pub struct Header {
    // message fields
    // @@protoc_insertion_point(field:Header.projector_id)
    pub projector_id: i32,
    // @@protoc_insertion_point(field:Header.point_count)
    pub point_count: i32,
    // @@protoc_insertion_point(field:Header.home)
    pub home: bool,
    // @@protoc_insertion_point(field:Header.enable)
    pub enable: bool,
    // @@protoc_insertion_point(field:Header.configuration_mode)
    pub configuration_mode: bool,
    // @@protoc_insertion_point(field:Header.draw_boundary)
    pub draw_boundary: bool,
    // @@protoc_insertion_point(field:Header.oneshot)
    pub oneshot: bool,
    // @@protoc_insertion_point(field:Header.speed_profile)
    pub speed_profile: i32,
    // @@protoc_insertion_point(field:Header.checksum)
    pub checksum: bool,
    // special fields
    // @@protoc_insertion_point(special_field:Header.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "projector_id",
            |m: &Header| { &m.projector_id },
            |m: &mut Header| { &mut m.projector_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "point_count",
            |m: &Header| { &m.point_count },
            |m: &mut Header| { &mut m.point_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "home",
            |m: &Header| { &m.home },
            |m: &mut Header| { &mut m.home },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enable",
            |m: &Header| { &m.enable },
            |m: &mut Header| { &mut m.enable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "configuration_mode",
            |m: &Header| { &m.configuration_mode },
            |m: &mut Header| { &mut m.configuration_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "draw_boundary",
            |m: &Header| { &m.draw_boundary },
            |m: &mut Header| { &mut m.draw_boundary },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "oneshot",
            |m: &Header| { &m.oneshot },
            |m: &mut Header| { &mut m.oneshot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "speed_profile",
            |m: &Header| { &m.speed_profile },
            |m: &mut Header| { &mut m.speed_profile },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "checksum",
            |m: &Header| { &m.checksum },
            |m: &mut Header| { &mut m.checksum },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Header>(
            "Header",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Header {
    const NAME: &'static str = "Header";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.projector_id = is.read_int32()?;
                },
                16 => {
                    self.point_count = is.read_int32()?;
                },
                24 => {
                    self.home = is.read_bool()?;
                },
                32 => {
                    self.enable = is.read_bool()?;
                },
                40 => {
                    self.configuration_mode = is.read_bool()?;
                },
                48 => {
                    self.draw_boundary = is.read_bool()?;
                },
                56 => {
                    self.oneshot = is.read_bool()?;
                },
                64 => {
                    self.speed_profile = is.read_int32()?;
                },
                72 => {
                    self.checksum = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.projector_id != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.projector_id);
        }
        if self.point_count != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.point_count);
        }
        if self.home != false {
            my_size += 1 + 1;
        }
        if self.enable != false {
            my_size += 1 + 1;
        }
        if self.configuration_mode != false {
            my_size += 1 + 1;
        }
        if self.draw_boundary != false {
            my_size += 1 + 1;
        }
        if self.oneshot != false {
            my_size += 1 + 1;
        }
        if self.speed_profile != 0 {
            my_size += ::protobuf::rt::int32_size(8, self.speed_profile);
        }
        if self.checksum != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.projector_id != 0 {
            os.write_int32(1, self.projector_id)?;
        }
        if self.point_count != 0 {
            os.write_int32(2, self.point_count)?;
        }
        if self.home != false {
            os.write_bool(3, self.home)?;
        }
        if self.enable != false {
            os.write_bool(4, self.enable)?;
        }
        if self.configuration_mode != false {
            os.write_bool(5, self.configuration_mode)?;
        }
        if self.draw_boundary != false {
            os.write_bool(6, self.draw_boundary)?;
        }
        if self.oneshot != false {
            os.write_bool(7, self.oneshot)?;
        }
        if self.speed_profile != 0 {
            os.write_int32(8, self.speed_profile)?;
        }
        if self.checksum != false {
            os.write_bool(9, self.checksum)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Header {
        Header::new()
    }

    fn clear(&mut self) {
        self.projector_id = 0;
        self.point_count = 0;
        self.home = false;
        self.enable = false;
        self.configuration_mode = false;
        self.draw_boundary = false;
        self.oneshot = false;
        self.speed_profile = 0;
        self.checksum = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Header {
        static instance: Header = Header {
            projector_id: 0,
            point_count: 0,
            home: false,
            enable: false,
            configuration_mode: false,
            draw_boundary: false,
            oneshot: false,
            speed_profile: 0,
            checksum: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Header {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Header").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:DrawInstruction)
pub struct DrawInstruction {
    // message fields
    // @@protoc_insertion_point(field:DrawInstruction.xCoOrd)
    pub xCoOrd: i32,
    // @@protoc_insertion_point(field:DrawInstruction.yCoOrd)
    pub yCoOrd: i32,
    // @@protoc_insertion_point(field:DrawInstruction.red)
    pub red: i32,
    // @@protoc_insertion_point(field:DrawInstruction.green)
    pub green: i32,
    // @@protoc_insertion_point(field:DrawInstruction.blue)
    pub blue: i32,
    // @@protoc_insertion_point(field:DrawInstruction.checksum)
    pub checksum: bool,
    // special fields
    // @@protoc_insertion_point(special_field:DrawInstruction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DrawInstruction {
    fn default() -> &'a DrawInstruction {
        <DrawInstruction as ::protobuf::Message>::default_instance()
    }
}

impl DrawInstruction {
    pub fn new() -> DrawInstruction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "xCoOrd",
            |m: &DrawInstruction| { &m.xCoOrd },
            |m: &mut DrawInstruction| { &mut m.xCoOrd },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "yCoOrd",
            |m: &DrawInstruction| { &m.yCoOrd },
            |m: &mut DrawInstruction| { &mut m.yCoOrd },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "red",
            |m: &DrawInstruction| { &m.red },
            |m: &mut DrawInstruction| { &mut m.red },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "green",
            |m: &DrawInstruction| { &m.green },
            |m: &mut DrawInstruction| { &mut m.green },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "blue",
            |m: &DrawInstruction| { &m.blue },
            |m: &mut DrawInstruction| { &mut m.blue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "checksum",
            |m: &DrawInstruction| { &m.checksum },
            |m: &mut DrawInstruction| { &mut m.checksum },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DrawInstruction>(
            "DrawInstruction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DrawInstruction {
    const NAME: &'static str = "DrawInstruction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.xCoOrd = is.read_int32()?;
                },
                16 => {
                    self.yCoOrd = is.read_int32()?;
                },
                24 => {
                    self.red = is.read_int32()?;
                },
                32 => {
                    self.green = is.read_int32()?;
                },
                40 => {
                    self.blue = is.read_int32()?;
                },
                48 => {
                    self.checksum = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.xCoOrd != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.xCoOrd);
        }
        if self.yCoOrd != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.yCoOrd);
        }
        if self.red != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.red);
        }
        if self.green != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.green);
        }
        if self.blue != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.blue);
        }
        if self.checksum != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.xCoOrd != 0 {
            os.write_int32(1, self.xCoOrd)?;
        }
        if self.yCoOrd != 0 {
            os.write_int32(2, self.yCoOrd)?;
        }
        if self.red != 0 {
            os.write_int32(3, self.red)?;
        }
        if self.green != 0 {
            os.write_int32(4, self.green)?;
        }
        if self.blue != 0 {
            os.write_int32(5, self.blue)?;
        }
        if self.checksum != false {
            os.write_bool(6, self.checksum)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DrawInstruction {
        DrawInstruction::new()
    }

    fn clear(&mut self) {
        self.xCoOrd = 0;
        self.yCoOrd = 0;
        self.red = 0;
        self.green = 0;
        self.blue = 0;
        self.checksum = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DrawInstruction {
        static instance: DrawInstruction = DrawInstruction {
            xCoOrd: 0,
            yCoOrd: 0,
            red: 0,
            green: 0,
            blue: 0,
            checksum: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DrawInstruction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DrawInstruction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DrawInstruction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DrawInstruction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Light)
pub struct Light {
    // message fields
    // @@protoc_insertion_point(field:Light.light_id)
    pub light_id: i32,
    // @@protoc_insertion_point(field:Light.enable)
    pub enable: bool,
    // special fields
    // @@protoc_insertion_point(special_field:Light.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Light {
    fn default() -> &'a Light {
        <Light as ::protobuf::Message>::default_instance()
    }
}

impl Light {
    pub fn new() -> Light {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "light_id",
            |m: &Light| { &m.light_id },
            |m: &mut Light| { &mut m.light_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enable",
            |m: &Light| { &m.enable },
            |m: &mut Light| { &mut m.enable },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Light>(
            "Light",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Light {
    const NAME: &'static str = "Light";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.light_id = is.read_int32()?;
                },
                16 => {
                    self.enable = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.light_id != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.light_id);
        }
        if self.enable != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.light_id != 0 {
            os.write_int32(1, self.light_id)?;
        }
        if self.enable != false {
            os.write_bool(2, self.enable)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Light {
        Light::new()
    }

    fn clear(&mut self) {
        self.light_id = 0;
        self.enable = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Light {
        static instance: Light = Light {
            light_id: 0,
            enable: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Light {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Light").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Light {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Light {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Audio)
pub struct Audio {
    // message fields
    // @@protoc_insertion_point(field:Audio.audio_file)
    pub audio_file: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Audio.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Audio {
    fn default() -> &'a Audio {
        <Audio as ::protobuf::Message>::default_instance()
    }
}

impl Audio {
    pub fn new() -> Audio {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "audio_file",
            |m: &Audio| { &m.audio_file },
            |m: &mut Audio| { &mut m.audio_file },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Audio>(
            "Audio",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Audio {
    const NAME: &'static str = "Audio";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.audio_file = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.audio_file.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.audio_file);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.audio_file.is_empty() {
            os.write_string(1, &self.audio_file)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Audio {
        Audio::new()
    }

    fn clear(&mut self) {
        self.audio_file.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Audio {
        static instance: Audio = Audio {
            audio_file: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Audio {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Audio").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Audio {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Audio {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Vision)
pub struct Vision {
    // message fields
    // @@protoc_insertion_point(field:Vision.vision_file)
    pub vision_file: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Vision.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vision {
    fn default() -> &'a Vision {
        <Vision as ::protobuf::Message>::default_instance()
    }
}

impl Vision {
    pub fn new() -> Vision {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vision_file",
            |m: &Vision| { &m.vision_file },
            |m: &mut Vision| { &mut m.vision_file },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vision>(
            "Vision",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vision {
    const NAME: &'static str = "Vision";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.vision_file = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.vision_file.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.vision_file);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.vision_file.is_empty() {
            os.write_string(1, &self.vision_file)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vision {
        Vision::new()
    }

    fn clear(&mut self) {
        self.vision_file.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vision {
        static instance: Vision = Vision {
            vision_file: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vision {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vision").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vision {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vision {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cschema.proto\"\xa7\x01\n\x0bpicoMessage\x12*\n\tprojector\x18\x01\
    \x20\x01(\x0b2\n.ProjectorH\0R\tprojector\x12\x1e\n\x05light\x18\x02\x20\
    \x01(\x0b2\x06.LightH\0R\x05light\x12\x1e\n\x05audio\x18\x03\x20\x01(\
    \x0b2\x06.AudioH\0R\x05audio\x12!\n\x06vision\x18\x04\x20\x01(\x0b2\x07.\
    VisionH\0R\x06visionB\t\n\x07payload\"k\n\tProjector\x12\x1f\n\x06header\
    \x18\x01\x20\x01(\x0b2\x07.HeaderR\x06header\x12=\n\x11draw_instructions\
    \x18\x02\x20\x03(\x0b2\x10.DrawInstructionR\x10drawInstructions\"\xa7\
    \x02\n\x06Header\x12!\n\x0cprojector_id\x18\x01\x20\x01(\x05R\x0bproject\
    orId\x12\x1f\n\x0bpoint_count\x18\x02\x20\x01(\x05R\npointCount\x12\x12\
    \n\x04home\x18\x03\x20\x01(\x08R\x04home\x12\x16\n\x06enable\x18\x04\x20\
    \x01(\x08R\x06enable\x12-\n\x12configuration_mode\x18\x05\x20\x01(\x08R\
    \x11configurationMode\x12#\n\rdraw_boundary\x18\x06\x20\x01(\x08R\x0cdra\
    wBoundary\x12\x18\n\x07oneshot\x18\x07\x20\x01(\x08R\x07oneshot\x12#\n\r\
    speed_profile\x18\x08\x20\x01(\x05R\x0cspeedProfile\x12\x1a\n\x08checksu\
    m\x18\t\x20\x01(\x08R\x08checksum\"\x99\x01\n\x0fDrawInstruction\x12\x16\
    \n\x06xCoOrd\x18\x01\x20\x01(\x05R\x06xCoOrd\x12\x16\n\x06yCoOrd\x18\x02\
    \x20\x01(\x05R\x06yCoOrd\x12\x10\n\x03red\x18\x03\x20\x01(\x05R\x03red\
    \x12\x14\n\x05green\x18\x04\x20\x01(\x05R\x05green\x12\x12\n\x04blue\x18\
    \x05\x20\x01(\x05R\x04blue\x12\x1a\n\x08checksum\x18\x06\x20\x01(\x08R\
    \x08checksum\":\n\x05Light\x12\x19\n\x08light_id\x18\x01\x20\x01(\x05R\
    \x07lightId\x12\x16\n\x06enable\x18\x02\x20\x01(\x08R\x06enable\"&\n\x05\
    Audio\x12\x1d\n\naudio_file\x18\x01\x20\x01(\tR\taudioFile\")\n\x06Visio\
    n\x12\x1f\n\x0bvision_file\x18\x01\x20\x01(\tR\nvisionFileJ\xc1\x0c\n\
    \x06\x12\x04\0\0,*\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\
    \x04\x02\0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x13\n\x0c\n\x04\x04\
    \0\x08\0\x12\x04\x03\x02\x08\x03\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x03\
    \x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\x04\x04\x1c\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03\x04\x04\r\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x04\x0e\
    \x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x04\x1a\x1b\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x05\x04\x14\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x05\
    \x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x05\n\x0f\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x05\x12\x13\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x06\
    \x04\x14\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x06\x04\t\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03\x06\n\x0f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x06\x12\x13\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x07\x04\x16\n\x0c\n\x05\
    \x04\0\x02\x03\x06\x12\x03\x07\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x07\x0b\x11\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x07\x14\x15\n\n\n\
    \x02\x04\x01\x12\x04\x0b\0\x0e\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0b\x08\
    \x11\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0c\x02\x14\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0c\
    \t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0c\x12\x13\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\r\x021\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\r\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\r\x0b\x1a\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03\r\x1b,\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \r/0\n\n\n\x02\x04\x02\x12\x04\x10\0\x1a\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03\x10\x08\x0e\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x11\x02\x19\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03\x11\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x11\x08\x14\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x11\x17\x18\n\
    \x0b\n\x04\x04\x02\x02\x01\x12\x03\x12\x02\x18\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x03\x12\x02\x07\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x12\
    \x08\x13\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x12\x16\x17\n\x0b\n\x04\
    \x04\x02\x02\x02\x12\x03\x13\x02\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03\x13\x02\x06\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x13\x07\x0b\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x13\x0e\x0f\n\x0b\n\x04\x04\x02\
    \x02\x03\x12\x03\x14\x02\x12\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x14\
    \x02\x06\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x14\x07\r\n\x0c\n\x05\
    \x04\x02\x02\x03\x03\x12\x03\x14\x10\x11\n\x0b\n\x04\x04\x02\x02\x04\x12\
    \x03\x15\x02\x1e\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x15\x02\x06\n\
    \x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x15\x07\x19\n\x0c\n\x05\x04\x02\
    \x02\x04\x03\x12\x03\x15\x1c\x1d\n\x0b\n\x04\x04\x02\x02\x05\x12\x03\x16\
    \x02\x19\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03\x16\x02\x06\n\x0c\n\x05\
    \x04\x02\x02\x05\x01\x12\x03\x16\x07\x14\n\x0c\n\x05\x04\x02\x02\x05\x03\
    \x12\x03\x16\x17\x18\n\x0b\n\x04\x04\x02\x02\x06\x12\x03\x17\x02\x13\n\
    \x0c\n\x05\x04\x02\x02\x06\x05\x12\x03\x17\x02\x06\n\x0c\n\x05\x04\x02\
    \x02\x06\x01\x12\x03\x17\x07\x0e\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03\
    \x17\x11\x12\n\x0b\n\x04\x04\x02\x02\x07\x12\x03\x18\x02\x1a\n\x0c\n\x05\
    \x04\x02\x02\x07\x05\x12\x03\x18\x02\x07\n\x0c\n\x05\x04\x02\x02\x07\x01\
    \x12\x03\x18\x08\x15\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03\x18\x18\x19\
    \n\x0b\n\x04\x04\x02\x02\x08\x12\x03\x19\x02\x14\n\x0c\n\x05\x04\x02\x02\
    \x08\x05\x12\x03\x19\x02\x06\n\x0c\n\x05\x04\x02\x02\x08\x01\x12\x03\x19\
    \x07\x0f\n\x0c\n\x05\x04\x02\x02\x08\x03\x12\x03\x19\x12\x13\n\n\n\x02\
    \x04\x03\x12\x04\x1c\0#\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1c\x08\x17\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03\x1d\x02\x13\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03\x1d\x02\x07\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1d\x08\
    \x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1d\x11\x12\n\x0b\n\x04\x04\
    \x03\x02\x01\x12\x03\x1e\x02\x13\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\
    \x1e\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1e\x08\x0e\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03\x1e\x11\x12\n\x0b\n\x04\x04\x03\x02\x02\
    \x12\x03\x1f\x02\x10\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\x1f\x02\x07\
    \n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x1f\x08\x0b\n\x0c\n\x05\x04\x03\
    \x02\x02\x03\x12\x03\x1f\x0e\x0f\n\x0b\n\x04\x04\x03\x02\x03\x12\x03\x20\
    \x02\x12\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03\x20\x02\x07\n\x0c\n\x05\
    \x04\x03\x02\x03\x01\x12\x03\x20\x08\r\n\x0c\n\x05\x04\x03\x02\x03\x03\
    \x12\x03\x20\x10\x11\n\x0b\n\x04\x04\x03\x02\x04\x12\x03!\x02\x11\n\x0c\
    \n\x05\x04\x03\x02\x04\x05\x12\x03!\x02\x07\n\x0c\n\x05\x04\x03\x02\x04\
    \x01\x12\x03!\x08\x0c\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03!\x0f\x10\n\
    \x0b\n\x04\x04\x03\x02\x05\x12\x03\"\x02\x14\n\x0c\n\x05\x04\x03\x02\x05\
    \x05\x12\x03\"\x02\x06\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03\"\x07\x0f\
    \n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03\"\x12\x13\n\n\n\x02\x04\x04\x12\
    \x04%\0(\x01\n\n\n\x03\x04\x04\x01\x12\x03%\x08\r\n\x0b\n\x04\x04\x04\
    \x02\0\x12\x03&\x02\x15\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03&\x02\x07\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03&\x08\x10\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03&\x13\x14\n\x0b\n\x04\x04\x04\x02\x01\x12\x03'\x02\x12\n\x0c\
    \n\x05\x04\x04\x02\x01\x05\x12\x03'\x02\x06\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03'\x07\r\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03'\x10\x11\n\t\
    \n\x02\x04\x05\x12\x03*\0(\n\n\n\x03\x04\x05\x01\x12\x03*\x08\r\n\x0b\n\
    \x04\x04\x05\x02\0\x12\x03*\x10&\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03*\
    \x10\x16\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03*\x17!\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03*$%\n\t\n\x02\x04\x06\x12\x03,\0*\n\n\n\x03\x04\x06\
    \x01\x12\x03,\x08\x0e\n\x0b\n\x04\x04\x06\x02\0\x12\x03,\x11(\n\x0c\n\
    \x05\x04\x06\x02\0\x05\x12\x03,\x11\x17\n\x0c\n\x05\x04\x06\x02\0\x01\
    \x12\x03,\x18#\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03,&'b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(PicoMessage::generated_message_descriptor_data());
            messages.push(Projector::generated_message_descriptor_data());
            messages.push(Header::generated_message_descriptor_data());
            messages.push(DrawInstruction::generated_message_descriptor_data());
            messages.push(Light::generated_message_descriptor_data());
            messages.push(Audio::generated_message_descriptor_data());
            messages.push(Vision::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
